* Infrastruktura javnega ključa ter overjen dogovor o ključu
** Cilji laboratorijske vaje
- Izdelati lastno certifikatno agencijo, certifikatne zahtevke ter končne uporabniške certifikate
- Implementirati nekatere izbrane protokole za dogovor o ključu
- Izvesti napad s posrednikom (angl. man-in-the-middle) na neoverjen dogovor o ključu
** Naloga 0: Izdelava certifikatov
Začetna naloga kot tudi navodila zanjo se nahajajo [[./PKI.ipynb][v delovnem zvezku IPython Notebook.]]
** Certifikati v Javi
Pri tej nalogi si zgolj oglejte delovanje certifikatov.

*** Zunanja knjižnica Bouncy Castle
Prvikrat bomo v Javi za delo uporabili zunanjo knjižnico, in sicer knjižnico [[https://www.bouncycastle.org][Bouncy Castle.]] V javanski projekt smo jo uvozili tako, da smo v datoteko [[./java-ake/pom.xml][pom.xml]] dodali sledeči blok.

#+begin_src xml
<dependency>
    <groupId>org.bouncycastle</groupId>
    <artifactId>bcprov-jdk18on</artifactId>
    <version>1.77</version>
</dependency>
#+end_src

Knjižnico uporabimo zgolj za lažje branje datotek, ki vsebujejo certifikate in pripadajoče zasebne ključe. Da se pa knjižnica tudi dejansko uporabi, jo pa moramo v Javi registrirati. To je narejeno v datoteki =CertUtils.java= v statičnem bloku:

#+begin_src java
public class CertUtils {
    static {
        Security.addProvider(new BouncyCastleProvider());
    }
    // ... izpuščeno ...
}
#+end_src

Registracija je nekaj, kar je potrebno zgolj pri varnostnih knjižnicah; pri ostalih Javanskih knjižnicah ni potrebna.
*** Branje in uporaba certifikatov
Certifikat preberemo z diska s pomočjo pomožnih metod =certFromFile=, =certFromBytes= ter =privateKeyFromFile=. Primere uporabe teh metod si poglejte v datotekah =CertUtils.java= ter =RSASignatureExample.java=.

Ko bo delovanje omenjenih programov jasno, nadaljujte z nalogo 1.
** Naloga 1: Enostransko overjen dogovor o ključu -- Protokol 1A
V datoteki =A1OneSidedSimpleAKE.java= implementirajte enostranski dogovor o ključu, ki smo ga obravnavali tekom predavanj; tam smo ga poimenovali =Protokol 1A=.

Poleg vseh preverjanj, ki so navedene na prosojnicah, mora Ana tudi preveriti prejet certifikat. Pri tem se omejite na identiteto nosilca, časovno veljavnost ter veljavnost podpisa; preklica in ostalih atributov na certifikatu ni potrebno preverjati. Za preverjanje časovne veljave uporabite ustrezno funkcijo. [[https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/security/cert/X509Certificate.html][Za pomoč poglejte v dokumentacijo.]]

** Naloga 2: Vzajemno overjen dogovor o ključu -- Protokol 1B
Sedaj pa v datoteki =A2MutalSimpleAKE.java= implementirajte še Protokol 1B: zanj veljajo enake zahteve glede preverjanja certifikatov kot pri prejšnji nalogi.
** Naloga 3: Implementacija napada s posrednikom
Nazadnje v datoteko =A3MITMSimpleKE.java= implementirajte še napad s posrednikom na neoverjen (anonimni) dogovor o ključu s pomočjo asimetrične šifre.

Koda v agentih =Ana= in =Bor= je že pripravljena in je ne smete spreminjati. Vaš napad implementirajte v metodi =task()= agenta =Nandi=. Za podrobnosti napada poglejte prosojnice s predavanj.
